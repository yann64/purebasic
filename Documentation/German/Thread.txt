;
;     Thread library documentation
;
;      (c) 2025 - Fantaisie Software
;

@Library Thread

@Overview
  Ein Thread (auch "Teilprozess") ist ein Programmteil, welcher asynchron, d.h. im Hintergrund des
  Hauptprogramms, läuft. Dies bedeutet: es ist möglich, langwierige Operationen
  (Packen, Bildverarbeitung...) durchzuführen, ohne das gesamte Programm anzuhalten
  und damit dem Benutzer das Weiterarbeiten zu ermöglichen. Ein Thread läuft innerhalb
  Ihres Programms, es ist kein weiterer Prozess. Wenn das Hauptprogramm beendet wird,
  werden alle Threads zerstört. Unter PureBasic sind Threads einfach
  eine @ReferenceLink "procedures" "Prozedur", welche asynchron aufgerufen wird. Der Thread läuft, bis die 
  Prozedur endet.
@LineBreak
@LineBreak
  Beispiele für Einsatzmöglichkeiten von Programmen - bei denen Threads sinnvoll sind -
  bestehen z.B. darin, wenn Sie verschiedene Situationen mit verschiedenen Antwortzeiten oder
  Situationen, die in verschiedenen Intervallen auftreten, handhaben müssen. Um auf den
  vorigen Absatz zurückzukommen: die Antwortzeiten der eigentlichen Bild-Verarbeitung und
  der Benutzeroberfläche sind ziemlich verschieden (Sie können auf die Verarbeitung des
  Bildes warten, haben aber gleichzeitig eine reagierende Benutzerschnittstelle).
@LineBreak
@LineBreak
  PureBasic hat eine spezielle Compiler-Einstellung, um threadsichere Executable zu erstellen.
  (/THREAD @ReferenceLink "cli_compiler" "Kommandozeilen-Option" oder "Erstelle threadsicheres Executable" in den @ReferenceLink "ide_Compiler" "IDE-Optionen".)
  Ohne diesen Modus sind bestimmte Funktionen (und auch der String-Zugriff) schneller, aber
  nicht sicher zur Verwendung in Threads. Es ist dennoch möglich, Threads ohne diesen Modus
  zu erstellen, aber nicht empfehlenswert, da selbst eine einfache Sache wie der lokale Zugriff
  auf Strings gefährlich sein kann und geschützt werden muss.
  Das Aktivieren dieser Option macht diese Dinge sicher innerhalb von Threads, geht jedoch
  zu Lasten von etwas Geschwindigkeit. Die Entscheidung, ob Threads verwendet werden oder
  nicht, sollte mit Bedacht gefällt werden, und der Thread-Modus sollte nur dann verwendet
  werden, wenn wirklicher Bedarf dafür besteht.
@LineBreak
@LineBreak
  Hinweis: Threads müssen vorsichtig benutzt werden, da es möglich ist, dass Sie gleichzeitigen
  Zugriff auf geteilte (shared) Ressourcen (Speicher, Variablen, Dateien, etc.) haben und Sie
  dann manuell sicherstellen müssen, deshalb nicht in Konflikte zu geraten. Die Mutex-Befehle
  in dieser Library können verwendet werden, um den Zugriff auf solche geteilten Ressourcen
  zu synchronisieren.
@LineBreak
@LineBreak
  Mittels des @ReferenceLink "threaded" "Threaded" Schlüsselworts ist es möglich, thread-basierte
  beständige Objekte (@ReferenceLink "variables" "Variablen", @LibraryLink "array" "Arrays",
  @LibraryLink "list" "verknüpfte Listen", @LibraryLink "map" "Maps") zu erstellen.

@OS Windows
@LineBreak
@LineBreak
  Hinweis: Benutzen Sie innerhalb von Threads kein DirectX (MS Windows Einschränkung)! Wenn
  Sie auf Grafikdarstellung in Threads angewiesen sind, verwenden Sie stattdessen
  @LibraryLink "image" "Images" und @LibraryLink "2ddrawing" "2DDrawing".

@CommandList

@ExampleFile All Thread.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = IsThread(Thread)

@Description
  Überprüft, ob die angegebene Thread-Nummer ein von @@CreateThread erzeugter
  Thread ist, und ob dieser noch läuft.
  
@Parameter "Thread"
  Der zu verwendende Thread.

@ReturnValue
  Ein Wert ungleich Null, wenn der Thread noch gültig ist und läuft, andernfalls Null.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ThreadID = ThreadID(Thread) 

@Description
  Ermittelt die einmalige ID, welche den angegebenen Thread im Betriebssystem (OS) identifiziert.

@Parameter "Thread"
  Der zu verwendende Thread.

@ReturnValue
  Der System-Bezeichner (ID).
  Dieses Ergebnis ist manchmal auch als 'Handle' bekannt. Schauen Sie in das Extra-Kapitel
  @ReferenceLink "handles" "Handles und Nummern" für weitere Informationen.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Mutex = CreateMutex()

@Description
  Erstellt ein neues Mutex-Objekt. Dieses ist anfänglich entsperrt ("unlocked").
@Linebreak
@Linebreak
  Das Hauptziel der Mutex-Befehle ist die Thread-Synchronisation. Sie bedeuten nicht
  zu viel Aufwand, aber sie arbeiten nur innerhalb eines Programms, nicht systemweit.
  Ein Mutex ist ein Objekt, welches zur gleichen Zeit nur "im Besitz" bzw. gesperrt
  ("locked") von einem Thread sein kann. Es wird daher verwendet, um geteilte 
  Ressourcen zu schützen. Nur der Thread, der den Mutex gesperrt hat, wird Zugriff
  auf eine Datei, einen Speicherbereich, etc. haben.
@Linebreak
  Siehe @@LockMutex und @@UnlockMutex für
  das Sperren/Entsperren eines Mutex.

@NoParameters

@ReturnValue
  Das neue Mutex-Objekt - oder Null, wenn die Mutex-Erstellung fehlgeschlagen ist.

@Example
@Code
  ; Starten Sie diesen Code so wie er ist. Sie werden sehen, das die Zeilen
  ; gemischt durch die Threads ausgegeben werden. Jetzt entfernen Sie den
  ; Kommentar vor den Mutex-Befehlen und die Strings werden in Reihenfolge
  ; ausgegeben, da nur ein Thread zur gleichen Zeit das Recht zum Ausführen
  ; der Print-Befehle bekommt.
  ;
  Procedure WithoutMutex(*Number)     
    Shared Mutex
    
    For a = 1 To 5      
      ;LockMutex(Mutex)    ; entfernen Sie das ';' um den Unterschied zu sehen
    
      PrintN("Thread "+Str(*Number)+": Trying to print 5x in a row:")
      For b = 1 To 5
        Delay(50)
        PrintN("Thread "+Str(*Number)+" Line "+Str(b))
      Next b          
      
      ;UnlockMutex(Mutex) ; entfernen Sie das ';' um den Unterschied zu sehen
    Next a    
  EndProcedure
  
  OpenConsole()
  Mutex = CreateMutex()
  
  thread1 = CreateThread(@WithoutMutex(), 1)
  Delay(25)
  thread2 = CreateThread(@WithoutMutex(), 2)
  Delay(25)
  thread3 = CreateThread(@WithoutMutex(), 3)
  
  WaitThread(thread1)
  WaitThread(thread2)
  WaitThread(thread3)
  
  Input()
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Thread = CreateThread(@ProcedureName(), *Wert)

@Description
  Erstellt einen neuen Thread, welcher im Hintergrund der Applikation läuft. Wenn
  der Thread korrekt erstellt wurde, wird die 'Thread' Nummer zurückgegeben, welche
  zusammen mit den anderen Befehlen, wie @@KillThread, @@PauseThread,
  etc..., benutzt wird. Die Prozedur, welche Sie als ein Thread verwenden, muss
  einen Parameter haben und kann nichts zurückgeben. Das '*Wert' Argument von
  CreateThread() wird als Parameter an die Prozedur übergeben. Wenn Sie versuchen,
  von Ihrem Thread aus einen Wert zurückzugeben, wird dieser einfach verloren gehen.

@Parameter "@ProcedureName()"
  Die Adresse der Prozedur, welche Sie als Code für den neuen
  Thread benutzen möchten. Denken Sie daran, dem Prozedurennamen das @ voranzustellen
  und an die Klammern dahinter, damit die Adresse der Prozedur übergeben wird.

@Parameter "*Wert"
  Der als Parameter an die Thread-Prozedur übergebene Wert.
  Es liegt an Ihnen, wofür dieser Wert verwendet wird.

@Returnvalue
  Die Nummer des neu erstellten Threads - oder Null, wenn der neue Thread nicht
  erstellt werden konnte. Diese Nummer wird benötigt, wenn Sie den Thread mit den anderen
  Befehlen dieser Library kontrollieren möchten.

@Example
  Das nachfolgende Beispiel zeigt den grundlegenden Weg zur Erstellung eines Threads,
  wenn er auch in diesem Fall nichts weiter tut.
@LineBreak
@LineBreak
@Code
  Procedure DeineProzedur(*Wert)
    ; Die Variable '*Wert' wird 23 enthalten
  EndProcedure

  CreateThread(@DeineProzedur(), 23)
@EndCode
 

@Example Übergeben mehrerer Parameter an einen Thread

@Code
  Structure Person
    Name$
    Age.b
    Phone.l
  EndStructure
  
  Procedure Thread(*Parameters.Person)
    
    ; Zeigt die Parameter an
    ;
    Debug *Parameters\Name$
    Debug *Parameters\Age
    Debug *Parameters\Phone
    
    ; Sobald wir sie nicht mehr benötigen, verwenden wir ClearStructure(), um sicher zu gehen,
    ; dass alle dynamischen Objekte (wenn vorhanden) korrekt gelöscht werden, und geben
    ; den dynamischen Speicherbereich frei
    ClearStructure(*Parameters, Person)
    FreeMemory(*Parameters)
    
  EndProcedure
  
  ; Wir verwenden einen dynamisch zugewiesenen Speicherbereich, was auch beim Aufrufen von einer Prozedur aus noch funktioniert.
  ; Der Speicherbereich wird durch den Thread freigegeben, wenn der Thread endet.
  ;
  *Parameters.Person = AllocateMemory(SizeOf(Person))
  *Parameters\Name$ = "John"
  *Parameters\Age   = 30
  *Parameters\Phone = 10203040
  
  CreateThread(@Thread(), *Parameters) ; Einen Zeiger auf unsere Struktur an den Thread senden

  Delay(2000)
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeMutex(Mutex)

@Description
  Gibt ein Mutex-Objekt und dessen benötigten Speicher frei.

@Parameter "Mutex"
  Der freizugebende Mutex.

@NoReturnValue

@Remarks
  Das Mutex-Objekt sollte zum Zeitpunkt der Freigabe entsperrt sein und danach nicht weiter
  verwendet werden. Um hierbei sicherzugehen, sollte ein Mutex nur freigegeben werden, nachdem
  alle Threads, die es verwenden, entweder beendet sind oder anderweitig sichergestellt ist, 
  dass diese den Mutex nicht erneut verwenden.

@SeeAlso
  @@CreateMutex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function KillThread(Thread)

@Description
  Entfernt umgehend den angegebenen Thread, der zuvor mit @@CreateThread erstellt
  wurde. Dies ist eine sehr gefährliche Operation und sollte nur selten benutzt werden.
  Das Problem ist, dass der Thread umgehend entfernt wird und keine Chance
  hat, irgendwelchen "Aufräumcode" (z.B. Speicher freigeben, Einträge freigeben,
  De-Allokieren seines eigenen Stacks) auszuführen.
@LineBreak
@LineBreak
  Wenn möglich, sollte ein Flag (z.B. eine globale Variable) verwendet werden, welcher dem Thread
  mitteilt, sich selbst zu beenden (und das benötigte "Aufräumen" zu erledigen). Und dieser Befehl
  sollte nur verwendet werden, wenn dies auf irgendwelchen Gründen nicht möglich ist.  

@Parameter "Thread"
  Der zu entfernende Thread. Dieser Wert wird von @@CreateThread zurückgegeben.

@NoReturnValue

@Example
@Code
  ; Ein(e) Prozedur/Thread, welche nie enden wird. Nicht gut, aber es zeigt
  ; wie KillThread arbeitet
  Procedure PrintStuff(*Interval)
    Repeat
      PrintN(".")
      Delay(*Interval)
    ForEver
  EndProcedure

  If OpenConsole()
    thread = CreateThread(@PrintStuff(), 500)
    If thread
      For i = 0 To 10
        PrintN("A")
        Delay(999)

        If i = 5
          KillThread(thread)
        EndIf
      Next
    EndIf
  EndIf
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function LockMutex(Mutex)

@Description
  Wartet, bis das Mutex-Objekt verfügbar ist (nicht von einem anderen Thread gesperrt) und 
  sperrt ("lock") dann das Objekt, damit kein anderer Thread einen Zugriff auf dieses Objekt
  bekommt.
@LineBreak
@LineBreak
  Nachdem dieser Befehl zurückkehrt, ist sichergestellt, dass dieser Thread der einzige mit
  einem gesperrten Status auf den Mutex ist.
  Der Thread kann nun frei auf die von diesem Mutex geschützten Ressourcen zugreifen, da es
  der einzige mit exklusivem Zugriff auf den Mutex ist.
@LineBreak
@LineBreak
  Wenn ein weiterer Thread LockMutex() aufruft, während dieser den Zugriff hat, wird innerhalb
  des LockMutex() Befehls gewartet, bis dieser Thread @@UnlockMutex aufruft,
  um seinen Zugriff auf den Mutex freizugeben.
@LineBreak
@LineBreak
  @Bold "Hinweis:" Da der LockMutex() Befehl wartet, bis der Mutex verfügbar ist, kann dies
  leicht zu "Lockup"-Situationen (Sperrung innerhalb des Programms) führen, wenn ein 
  @@UnlockMutex Aufruf vergessen wurde.
@LineBreak
@LineBreak
  Siehe @@CreateMutex für einen Beispiel-Code.

@Parameter "Mutex"
  Der zu sperrende Mutex.
  
@NoReturnValue

@SeeAlso
  @@UnlockMutex, @@CreateMutex  

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function PauseThread(Thread)

@Description
  Hält den angegebenen Thread an, der zuvor mit @@CreateThread erstellt wurde.
  Der Thread kann mittels @@ResumeThread fortgesetzt werden.

@Parameter "Thread"
  Der anzuhaltende (zu "pausierende") Thread.
  Dieser Wert wird von @@CreateThread zurückgegeben.

@NoReturnValue

@Example
@Code
  Procedure PrintStuff(*Dummy)
    For i = 0 To 10
      PrintN(".")
      Delay(200)
    Next
  EndProcedure

  If OpenConsole()
    thread = CreateThread(@PrintStuff(), 0)
    If thread
      Delay(100)
      PauseThread(thread)
      For i = 0 To 10
        PrintN("A")
        Delay(50)
      Next
        
      ; Thread fortsetzen und ihm genug Zeit zur Ausführung geben
      ResumeThread(thread)
      Delay(3000)
    EndIf
    
    CloseConsole()
  EndIf
  End
@EndCode

@SeeAlso
  @@ResumeThread, @@CreateThread

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ResumeThread(Thread)

@Description
  Setzt den angegebenen Thread fort, welcher zuvor mittels @@PauseThread
  angehalten wurde.

@Parameter "Thread"
  Der fortzusetzende Thread. Dieser Wert wird von @@CreateThread zurückgegeben.

@NoReturnValue

@Remarks
  Siehe beim @@PauseThread Befehl für einen Beispiel-Code.

@SeeAlso
  @@PauseThread, @@CreateThread

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function AltePriorität = ThreadPriority(Thread, Priorität)

@Description
  Ändert die Priorität des angegebenen Threads und gibt die alte Priorität
  zurück. 
@LineBreak
@LineBreak
  Der Prioritäts-Wert kann zwischen 1 und 32 liegen. 1 ist die niedrigste
  Priorität, 16 ist die normale Priorität und 32 ist die zeitkritische Priorität (die
  höchste Priorität; bitte benutzen Sie diese nicht - außer Sie wissen, was Sie tun).
@LineBreak
@LineBreak
  Wird als neue Priorität 0 übergeben, dann wird die Priorität nicht verändert (nützlich,
  um nur die Priorität des Threads zu ermitteln, aber nicht zu verändern). Alle Threads
  werden mit normaler Priorität erstellt.
@LineBreak
@LineBreak
  Normalerweise werden Sie einem ständig laufenden Thread (zum Beispiel, einem Bild
  verarbeitenden Thread) eine Priorität geben, die nicht größer als die jedes anderen
  Threads in Ihrem System ist. Der Grund dafür ist, wenn der Thread ständig läuft und
  eine hohe Priorität hat, dass dann kein anderer Thread die Chance hat, ausgeführt zu werden.
  Wenn ein Thread schnell reagieren muss, aber die meiste Zeit mit dem Warten auf einige
  Ereignisse (Events) verbringt, dann können Sie ihm möglicherweise eine höhere als die
  normale Priorität geben.
@linebreak
@linebreak

@OS Windows
  Windows managet Threads (wählt aus, welcher Thread für eine kurze Zeit läuft)
  durch preemptives Multitasking, welches durch Prioritäten geregelt wird. Dabei
  können verschiedene Threads unterschiedliche Prioritäten-Stufen haben.
  Dies bedeutet, wenn es Zeit zur Ausführung eines anderen Threads wird (bekannt als
  Context-Switch), dann wird der Thread mit der höchsten Priorität (der fertig zum
  Starten ist) als nächster ausgeführt. Wenn es mehr als einen Thread mit der höchsten
  Priorität gibt (und sie auch fertig zum Starten sind), dann wird ein Thread nach 
  dem anderen (basierend auf "Successive Context-Switches") ausgeführt.
@EndOS

@Parameter "Thread"
  Der Thread, dessen Priorität geändert werden soll. Dieser Wert wird von @@CreateThread zurückgegeben.

@Parameter "Priorität"
  Die neue Priorität, welche dem Thread zugewiesen werden soll. Die Priorität kann 0 sein (bedeutet, dass die
  Priorität nicht geändert wird) oder im Bereich von 1 (niedrigste Priorität) bis 32 (höchste Priorität) liegen. 16 ist die
  normale Priorität. Windows unterstützt nicht 32 verschiedene Level der Priorität - hier ist eine
  entsprechende Tabelle:
@FixedFont 
  - 1: niedrigste
  - zwischen 2 und 15: geringer als normal
  - 16: normal
  - zwischen 17 und 30: höher als normal
  - 31: höchste
  - 32: zeitkritisch
@EndFixedFont

@ReturnValue
  Dieser Befehl gibt die vor dem Aufrufen dieses Befehls aktuelle Priorität des Threads zurück.
  Dies kann nützlich sein, wenn Sie die Priorität des Threads nur für eine kurze Zeit erhöhen
  möchten und danach zur vorher eingestellten Priorität zurückkehren möchten. Der zurückgegebene
  Wert ist nicht so notwendig wie der von ThreadPriority(), da es auch von der vom System 
  angebotenen Prioritätsoptimierung abhängt. 
@LineBreak

@Example
@Code
  ; Prozedur, die immer läuft (beachten Sie, es wird kein Delay Befehl
  ; verwendet, da dies ein Anhalten des Threads während der Pause
  ; verursachen würde)
  Procedure PrintStuff(*Interval)
    For i = 0 To 1000000000
      ; böse Wartezeit
    Next
  EndProcedure

  If OpenConsole()
    thread = CreateThread(@PrintStuff(), 500)
    If thread
      ; Priorität über die des Haupt-Threads erhöhen.
      ; Sie sollten die Wartezeit vor dem Ausführen des
      ; Print Befehls beachten. Ändern Sie jetzt die 17
      ; in eine 15 (niedrige als die normale Priorität)
      ; und Sie werden feststellen, dass die Ausgabe
      ; umgehend beginnt.
      ThreadPriority(thread, 17)
      PrintN("Warte auf Thread mit hoeherer Prioritaet zum Beenden")
    EndIf
    
    PrintN("Druecken Sie Return zum Beenden")
    Input()
    CloseConsole()
  EndIf
  End
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = TryLockMutex(Mutex)

@Description
  Versucht, den angegebenen Mutex zu sperren ("lock"). 
@Linebreak
@Linebreak
  Anders als @@LockMutex stoppt dieser Befehl nicht die Ausführung bis der 
  Mutex verfügbar ist. Er kehrt umgehend zurück und sein Rückgabewert zeigt an, ob das Sperren
  erfolgreich war oder nicht. Dies ist nützlich in Situationen, wo der Thread nicht auf die
  Verfügbarkeit des Mutex warten soll und stattdessen andere Dinge in der Zwischenzeit
  erledigen soll.

@Parameter "Mutex"
  Der zu sperrende Mutex.

@Returnvalue
  Ein Wert ungleich Null, wenn der Mutex erfolgreich gesperrt wurde.
  Anderenfalls Null, wenn das Sperren fehlgeschlagen ist.

@Remarks
  Wenn das Sperren erfolgreich war, muss der @@UnlockMutex 
  Befehl aufgerufen werden, um den Mutex für andere Threads erneut verfügbar zu machen.
  Wenn dies unterbleibt, kann dies leicht zu einer "Lockup"-Situation (Sperrung innerhalb
  des Programms) führen.

@Example
@Code
  Procedure ThreadProcedure(*Value)
    Shared Mutex
    
    Repeat
      If TryLockMutex(Mutex)
        PrintN("Mutex erfolgreich gesperrt.")
        
        UnlockMutex(Mutex)
        Break ; Schleife und Thread verlassen
      Else
        PrintN("Warte noch auf Mutex Zugriff...")
        Delay(200)
      EndIf
    ForEver  
  EndProcedure
  
  OpenConsole()
  
  Mutex = CreateMutex()
  LockMutex(Mutex) ; Hauptprogramm hat den Mutex zuerst gesperrt
  Thread = CreateThread(@ThreadProcedure(), 0)
  
  Delay(4000)
  UnlockMutex(Mutex) ; jetzt geben wir den Mutex frei, womit der Thread ihn bekommen kann
  
  Input()
@EndCode

@SeeAlso
  @@UnlockMutex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UnlockMutex(Mutex)

@Description
  Entsperrt ("unlock") einen zuvor mittels @@LockMutex gesperrten Mutex.
  Der Mutex ist dann für andere Threads erneut zum Sperren verfügbar.

@Parameter "Mutex"
  Der zu entsperrende Mutex.

@NoReturnValue

@Remarks
  Ein Mutex kann nur durch den Thread entsperrt werden, welcher ihn auch gesperrt hat.
@Linebreak
@Linebreak
  Siehe @@CreateMutex für einen Beispiel-Code.

@SeeAlso
  @@LockMutex, @@CreateMutex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = WaitThread(Thread [, Timeout])

@Description
  Hält die Programmausführung an, bis der angegebene 'Thread' endet oder das optionale
  'Timeout' (in Millisekunden) erreicht wird. Wurde der Thread bereits abgeschlossen, 
  kehrt diese Funktion umgehend zurück.

@Parameter "Thread"
  Der Thread, auf den gewartet werden soll. Dieser Wert wird von @@CreateThread zurückgegeben.

@OptionalParameter "Timeout"
  Timeout ("Auszeit"), auf welche gewartet werden soll, in Millisekunden.

@Returnvalue
  Ein Wert ungleich Null, wenn der Thread beendet wurde. Oder Null,
  wenn der Timeout-Wert erreicht wurde.

@Example
@Code
  Procedure PrintStuff(*Interval)
    For i = 0 To 10
      PrintN(".")
      Delay(*Interval)
    Next
  EndProcedure

  If OpenConsole()
    thread = CreateThread(@PrintStuff(), 500)
    If thread
      ; Wartet auf das Beenden des Threads, bevor wir fortfahren.
      ; Kommentieren Sie den WaitThread Befehl aus und sehen Sie, was passiert
      WaitThread(thread)
        
        For i = 0 To 10
          PrintN("A")
          Delay(1000)
        Next
    EndIf
  EndIf
@EndCode
  
@SupportedOS
;--------------------------------------------------------------------------------------------------------

@Function Semaphore = CreateSemaphore([Anfangszähler])

@Description
  Erstellt ein neues Semaphore-Objekt.
@LineBreak
@LineBreak
  Ein Semaphore ist ein Thread-Synchronisations-Objekt, welches einen internen Zähler einschließt.
  Es hat zwei Arten von Operationen: @Link "SignalSemaphore" "Signal" und @Link "WaitSemaphore" "Warten".
  Eine Warte-Operation vermindert den Zähler des Semaphore um eins. Wenn der Zähler unter 0 fallen
  würde, dann blockiert die Warte-Operation bis ein Signal-Aufruf erfolgt. Eine Signal-Operation
  erhöht den Zähler um eins, und gibt (wenn vorhanden) einen blockierten Thread wieder frei.
  Ein Semaphore ermöglicht das Erzwingen von minimalen und maximalen Zählern gegenüber Threads, zum
  Beispiel um zu vermeiden, dass einem Queue (Warteschlange) die Elemente ausgehen oder er zu viele
  Elemente erhält.
@LineBreak
@LineBreak
  Anders als ein @Link "CreateMutex" "Mutex" ist ein Semaphore-Objekt nicht "im Besitz" eines
  bestimmten Threads, was bedeutet dass Signal/Warte-Aufrufe nicht vom gleichen Thread erfolgen
  müssen, wie dies mit @@LockMutex und @@UnlockMutex der Fall ist.
  Tatsächlich ist die gebräuchliche Nutzungsweise eines Semaphore-Objekts, durch einen Thread die
  @@SignalSemaphore Aufrufe durchzuführen und durch einen weiteren Thread alle
  @@WaitSemaphore Aufrufe durchzuführen, um eine Hersteller/Konsument-Struktur 
  (englisch: "producer/consumer pattern") zu schaffen.

@OptionalParameter "Anfangszähler"
  Dies muss ein positiver Wert sein, welcher den anfänglichen Zähler des Semaphore
  definiert. Wenn dieser nicht angegeben wird, lautet der anfängliche Zähler gleich 0.

@ReturnValue
  Das neue Semaphore-Objekt - oder Null, wenn die Semaphore-Erstellung fehlgeschlagen ist.

@Example
  Dieses Beispiel zeigt einen "Hersteller"-Thread, welcher ein Queue mit Elementen bevölkert, und
  den Haupt-Thread, der sie liest. Das Semaphore wird verwendet, um sicher zu gehen, dass dem Queue
  nie die Elemente ausgehen. Beachten Sie, dass dies auch erreicht werden kann, mit nur einem
  Mutex und Warten/Abfragen von Queue-Elementen mit einem @@Delay zwischendrin,
  aber die Semaphore-Befehle führen ein effizienteres Warten aus (kehren umgehend nach einem
  @@SignalSemaphore Aufruf zurück, und nicht nur wenn das nächste Mal eine Abfrage-Schleife
  den Queue überprüft).
@Code
; Stelle sicher, dass "Thread-sicheres Executable erstellen" in den Compiler-Optionen 
; aktiviert ist, für genaues Debuggen mit Threads
;
Global Semaphore = CreateSemaphore()
Global Mutex     = CreateMutex()
Global NewList Queue()

Procedure Producer(Total)

  For i = 1 To Total
    Delay(Random(750) + 250)
    
    ; Der Queue-Zugriff benötigt weiterhin einen normalen "Mutex Lock", um Thread-sicher zu sein
    LockMutex(Mutex)
      LastElement(Queue())
      AddElement(Queue())
      Queue() = i
    UnlockMutex(Mutex)    

    ; Signalisiere, dass es ein neues Queue-Element gibt
    SignalSemaphore(Semaphore)
  Next i
    
EndProcedure

If CreateThread(@Producer(), 30)

  For i = 1 To 30  
    ; Warte auf ein verfügbares Element
    WaitSemaphore(Semaphore)
    
    ; Queue-Status anzeigen
    LockMutex(Mutex)
      Queue$ = "Queue:"
      ForEach Queue()
        Queue$ + " " + Str(Queue())
      Next Queue()
      Debug Queue$
    
      ; Kopf-Element vom Queue entfernen
      FirstElement(Queue())
      DeleteElement(Queue())
    UnlockMutex(Mutex)
    
  Next i

EndIf
@EndCode  

@SeeAlso
  @@FreeSemaphore

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeSemaphore(Semaphore) 

@Description
  Zerstört das angegebene Semaphore-Objekt und gibt die von ihm verwendeten Ressourcen frei.

@Parameter "Semaphore"
  Das freizugebende Semaphore-Objekt.
  
@NoReturnValue

@SeeAlso
  @@CreateSemaphore

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SignalSemaphore(Semaphore)

@Description
  Erhöht den internen Zähler des Semaphore um eins, und gibt einen wartenden Thread frei (wenn
  es einen solchen gibt).
  
@Parameter "Semaphore"
  Das zu signalisierende Semaphore-Objekt.

@NoReturnValue

@Remarks
  Der Semaphore-Zähler ist begrenzt auf einen vorzeichenbehafteten @ReferenceLink "variables" "32 Bit Wert",
  womit ein Maximum von 2147483647 @@SignalSemaphore Aufrufen durchgeführt werden kann, ohne dass
  zwischendurch mit @@WaitSemaphore Aufrufen ausgeglichen wird.
@LineBreak
@LineBreak
  Siehe @@CreateSemaphore für ein Code-Beispiel.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function WaitSemaphore(Semaphore)

@Description
  Vermindert den internen Zähler des Semaphore um eins, und blockiert die weitere Thread-Ausführung,
  wenn der Zähler unter Null fallen würde. Ein blockierter Thread wird fortgesetzt, sobald ein
  weiterer Thread @@SignalSemaphore aufruft.

@Parameter "Semaphore"
  Das Semaphore-Objekt, auf das gewartet werden soll.

@NoReturnValue

@Remarks
  Der Semaphore-Zähler ist begrenzt auf einen vorzeichenbehafteten @ReferenceLink "variables" "32 Bit Wert",
  womit ein Maximum von 2147483647 @@SignalSemaphore Aufrufen durchgeführt werden kann, ohne dass
  zwischendurch mit @@WaitSemaphore Aufrufen ausgeglichen wird.
@LineBreak
@LineBreak
  Siehe @@CreateSemaphore für ein Code-Beispiel.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = TrySemaphore(Semaphore)

@Description
  Vermindert den internen Zähler des Semaphore um eins, aber nur wenn der Zähler über 0 liegt.
  Dies bewirkt das gleiche wie eine @@WaitSemaphore Operation, aber ohne das Blockieren,
  wenn der Zähler unter 0 fallen würde.

@Parameter "Semaphore"
  Das zu verwendende Semaphore-Objekt.

@ReturnValue
  Ein Wert ungleich Null, wenn der Semaphore-Zähler vermindert wurde - oder 0, wenn der
  Zähler nicht vermindert werden konnte, weil er bereits bei Null stand.

@SupportedOS

;--------------------------------------------------------------------------------------------------------
