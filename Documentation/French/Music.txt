;
; Music library documentation
;
; (c) Fantaisie Software
;

@Library Music

@Overview

  PureBasic peut jouer de la musique sous 
  forme de modules musicaux (.mod, .xm etc.) 
  pour ajouter un fond sonore à vos jeux 
  ou à vos applications. Les modules 
  musicaux sont bien connus des demo-makers 
  car c'est un moyen simple et efficace de 
  créer un environnement sonore.@LineBreak 
  Les outils utilisés pour créer les modules 
  musicaux s'appellent des 'trackers' 
  ( ProTracker, FastTracker, Impulse 
  Tracker...). Par rapport aux fichiers 
  wav et mp3, les modules musicaux ont 
  l'avantage d'être très compacts et 
  d'une longueur illimitée tout en 
  consommant très peu de ressources 
  processeur. Il est aussi possible de 
  sélectionner en temps réel différentes 
  parties du morceau pour s'adapter, par 
  exemple, à chaque phase d'un jeu. Il est 
  bien entendu possible de mixer un 
  @LibraryLink "sound" "son" classique et 
  un module musical en les jouant 
  simultanément.   
@LineBreak
@LineBreak
  La bibliothèque 
  @InternetLink "http://modplug-xmms.sourceforge.net/" "ModPlug" 
  est utilisée et permet une reproduction 
  sonore très fidèle tout en supportant 
  de nombreux formats musicaux différents 
  (XM, S3M, ...).
@LineBreak
@LineBreak
  Avant de pouvoir utiliser les commandes 
  relatives aux modules musicaux, il est 
  nécessaire d'appeler avec succès la 
  commande @@InitSound.

@CommandList

@ExampleFile All Music.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = CatchMusic(#Music, *Memoire, Taille)

@Description
  Charge un module musical déjà situé en 
  mémoire.

@Parameter "#Music"
  Le numéro d'identification du module 
  musical.
@LineBreak
@LineBreak 
  @ReferenceLink "purebasic_objects" "#PB_Any" 
  peut être utilisé pour générer 
  automatiquement ce numéro. 

@Parameter "*Memoire"  
  L'adresse mémoire (du buffer) où se 
  trouve le module.

@Parameter "Taille"
  Taille du tampon (buffer) en mémoire.
  
@ReturnValue
  Renvoie une valeur non nulle en cas de 
  succès, zéro sinon. 
  
@Remarks
  Si le module #Music était déjà créé, 
  il est automatiquement supprimé 
  et remplacé par le nouveau. 
@LineBreak
@LineBreak
  Cette commande est utile pour inclure 
  des modules musicaux directement dans 
  l'exécutable avec la commande 
  @ReferenceLink "includes" "IncludeBinary".
  Néanmoins, n'abusez pas de cette 
  fonctionnalité car un module musical 
  inclus dans un exécutable consomme 
  automatiquement de la mémoire 
  supplémentaire (car tout l'exécutable, 
  y compris les modules, sont chargés en 
  mémoire). 

@Example
@Code
  CatchMusic(0, ?Music, ?MusicEnd-?Music)
  End

  DataSection
    Music: 
      IncludeBinary "Music.xm"
    MusicEnd:
  EndDataSection
@EndCode

@SeeAlso
  @@LoadMusic, @@PlayMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeMusic(#Music)

@Description
  Arrête l'exécution et supprime un 
  module musical de la mémoire. 

@Parameter "#Music"
  Le module musical à libérer.
@LineBreak  
@LineBreak   
   Si @#PB_All est spécifié, tous les 
   modules musicaux restants sont libérés.  

@NoReturnValue

@Remarks
  Tous les modules musicaux restants sont 
  automatiquement supprimés quand le 
  programme se termine. 
  
@SeeAlso
  @@LoadMusic, @@CatchMusic  
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = GetMusicPosition(#Music)

@Description
  Renvoie la position en cours. 

@Parameter "#Music"
  Le module musical à utiliser. 

@ReturnValue
  Renvoie la position dans le module 
  musical en cours de lecture. 
@LineBreak   
  La première plage commence à 0.

@SeeAlso
  @@SetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = GetMusicRow(#Music)

@Description
  Renvoie la ligne en cours. 

@Parameter "#Music"
  Le module musical à utiliser. 

@ReturnValue
  Renvoie la ligne dans le module musical 
  en cours de lecture. 
@LineBreak   
  La première ligne commence à 0.

@SeeAlso
  @@SetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = IsMusic(#Music)

@Description
  Teste si un module musical est 
  correctement initialisé. 

@Parameter "#Music"
  Le module musical à tester. 

@ReturnValue
  Renvoie une valeur non nulle en cas de 
  succès, zéro sinon. 

@Remarks  
  Cette fonction a été créée pour pouvoir 
  passer n'importe quelle valeur en 
  paramètre sans qu'il ne puisse y avoir 
  de plantage. 
@LineBreak  
  C'est la fonction idéale pour vérifier 
  qu'un objet est correctement initialisé.

@SeeAlso
  @@LoadMusic, @@CatchMusic
   
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = LoadMusic(#Music, Fichier$)

@Description
  Charge en mémoire un module musical depuis un fichier. 

@Parameter "#Music"
  Le numéro d'identification du module musical.
@LineBreak
@LineBreak 
  @ReferenceLink "purebasic_objects" "#PB_Any" peut être utilisé pour générer automatiquement ce numéro. 

@Parameter "Fichier$"
  Le nom et le chemin du fichier musical à charger.

@ReturnValue
  Renvoie une valeur non nulle en cas de succès, zéro sinon. 

@Remarks
Pour rappel, @@PlayMusic permet de lancer la lecture de la musique.@LineBreak 
@InternetLink "http://modplug-xmms.sourceforge.net/" "ModPlug" prend en charge de nombreux formats musicaux, 
notamment : Protracker (4 canaux), FastTracker (jusqu'à 32 canaux, qualité 16 bits), Impulse Tracker, etc.

@SeeAlso
  @@CatchMusic, @@PlayMusic
 
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MusicVolume(#Music, Volume.f)

@Description
  Change le volume général en temps réel. 

@Parameter "#Music"
  Le module musical à utiliser.

@Parameter "Volume.f"
  Le nouveau volume sonore entre 0 et 100.
@LineBreak
@LineBreak 
  Utile pour les fondus enchaînés (fade in/fade out).

@NoReturnValue

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function PlayMusic(#Music)

@Description
  Joue un module musical. 

@Parameter "#Music"  
  Le module musical à jouer.

@NoReturnValue  

@SeeAlso
  @@LoadMusic, @@CatchMusic, @@StopMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetMusicPosition(#Music, Position)

@Description
  Change la position. 
  
@Parameter "#Music"
  Le module musical à utiliser.

@Parameter "Position"
  Change la position du module musical 
  par la plage spécifiée. 
@LineBreak
  La première plage commence à 0.

@NoReturnValue  

@SeeAlso
  @@GetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function StopMusic(#Music)

@Description
  Arrête la lecture. 
  
@Parameter "#Music"
  Le module musical à utiliser.
@LineBreak
@LineBreak  
  Si '#Music' est égal à @#PB_All, alors tous les modules musicaux en cours de lecture sont arrêtés.

@NoReturnValue

@SeeAlso
  @@PlayMusic
    
@SupportedOS

;--------------------------------------------------------------------------------------------------------


