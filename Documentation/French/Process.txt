;
; Process library documentation
;
; (c) Fantaisie Software
;

@Library Process

@Overview
  Cette bibliothèque permet de 
  récupérer des informations sur 
  le programme en cours, ainsi 
  que d'exécuter d'autres programmes 
  et de communiquer avec eux.
  Elle fournit un accès indépendant 
  à l'environnement et les paramètres 
  des programmes, ainsi que l'entrée 
  et la sortie standard.
  
@CommandList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = AvailableProgramOutput(Programme)

@Description
  Renvoie le nombre d'octets disponibles 
  en lecture sur la sortie du programme.

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram en spécifiant 
  l'option @#PB_Program_Read.
  
@ReturnValue
  Le nombre d'octets disponibles en 
  lecture sur la sortie du programme.
  
@Remarks
  La sortie peut être effectivement lue soit avec @@ReadProgramString 
  soit avec @@ReadProgramData. 
@LineBreak
  Cependant @@ReadProgramString ou @@ReadProgramData restent bloquée indéfiniment si le 
  programme réclame l'intervention de l'utilisateur. Comme par exemple, renvoyer un choix 
  oui/non au programme pour qu'il se poursuive.
  
@SeeAlso
  @@ReadProgramString, @@ReadProgramData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseProgram(Programme)

@Description
  Ferme la connexion avec le programme 
  lancé avec @@RunProgram et libère 
  toutes les ressources associées.

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram.

@NoReturnValue

@Remarks
  Cette commande ne force pas le 
  programme à se terminer, seule la 
  connexion avec lui est fermée. Pour 
  forcer le programme à quitter, la 
  commande @@KillProgram est disponible. 
  De plus, même si le programme
  se termine de façon normale, il est 
  important d'appeler CloseProgram() 
  pour libérer toutes les ressources.
@LineBreak
@LineBreak
  Si le programme a été lancé avec 
  l'option @#PB_Program_Write, 
  CloseProgram() enverra un signal 
  EOF (fin de fichier) sur l'entrée 
  standard du 'Programme'. Ce signal 
  peut aussi être artificiellement 
  provoqué sans fermer la connexion 
  avec le programme en appelant 
  @@WriteProgramData avec la valeur 
  spéciale @#PB_Program_Eof.

@SeeAlso
  @@KillProgram, @@RunProgram

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = CountProgramParameters()

@Description
  Renvoie le nombre de paramètres qui 
  ont été passés au programme.

@NoParameters

@ReturnValue
  Renvoie le nombre de paramètres qui 
  ont été passés au programme via 
  la ligne de commande ou avec 
  @@RunProgram.
  
@Remarks
  @@ProgramParameter peut être utilisé 
  pour lire chaque paramètre.

@SeeAlso
  @@ProgramParameter   

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = EnvironmentVariableName()

@Description
  Renvoie le nom de la variable d'environnement
  en cours d'énumération. 
  
@NoParameters

@ReturnValue
  Renvoie le nom de la variable 
  d'environnement en cours 
  d'énumération avec 
  @@ExamineEnvironmentVariables
  et @@NextEnvironmentVariable. 
 
@Remarks
  Pour récupérer la valeur de cette 
  variable d'environnement, utiliser 
  @@EnvironmentVariableValue.
  
@SeeAlso
  @@ExamineEnvironmentVariables, 
  @@NextEnvironmentVariable, 
  @@EnvironmentVariableValue
 
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = EnvironmentVariableValue()

@Description
  Renvoie la valeur de la variable 
  d'environnement en cours d'énumération.

@NoParameters

@ReturnValue
  Renvoie la valeur de la variable 
  d'environnement en cours d'énumération 
  avec @@ExamineEnvironmentVariables et 
  @@NextEnvironmentVariable.

@Remarks
  Pour récupérer le nom de cette variable 
  d'environnement, utiliser 
  @@EnvironmentVariableName.
  
@SeeAlso
  @@ExamineEnvironmentVariables, 
  @@NextEnvironmentVariable, 
  @@EnvironmentVariableName

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ExamineEnvironmentVariables()

@Description
  Initialise l'énumération des variables 
  d'environnement disponibles.

@NoParameters

@ReturnValue
  Renvoie une valeur non nulle en cas de 
  succès, zéro sinon.
  
@Remarks
  Les commandes @@NextEnvironmentVariable, 
  @@EnvironmentVariableName 
  et @@EnvironmentVariableValue sont 
  disponibles pour récupérer les informations
  concernant chaque variable d'environnement.

@Example
@Code
  ; énumère toutes les variables d'environnement disponibles pour le programme
  ;
  OpenConsole()
  If ExamineEnvironmentVariables()
    While NextEnvironmentVariable()
      PrintN(EnvironmentVariableName() + " = " + EnvironmentVariableValue())
    Wend
  EndIf
  PrintN("")
  PrintN("Appuyez sur [Entree] pour quitter.")
  Input()
@EndCode

@SeeAlso
  @@NextEnvironmentVariable, @@EnvironmentVariableName, @@EnvironmentVariableValue
 
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = GetEnvironmentVariable(Variable$)

@Description
  Renvoie le contenu (texte) d'une Variable 
  d'environnement.

@Parameter "Nom$"
  Le nom de la variable d'environnement.

@ReturnValue
  Renvoie le contenu de la 'Variable$' 
  d'environnement spécifiée. Si la variable 
  d'environnement n'existe pas, une chaîne 
  de caractères vide sera renvoyée.

@Example
@Code
  ; Affiche le contenu de la variable d'environnement "PATH"
  ;
  OpenConsole()
  PrintN(GetEnvironmentVariable("PATH"))
  PrintN("")
  PrintN("Appuyez sur [Entree] pour quitter.")
  Input()
@EndCode

@SeeAlso
  @@SetEnvironmentVariable
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = IsProgram(Programme)

@Description
  Teste si un programme préalablement 
  lancé avec @@RunProgram est correctement 
  initialisé.

@Parameter "Programme"
  Le programme à tester.

@ReturnValue
  Renvoie une valeur non nulle en cas de 
  succès, zéro sinon.

@Remarks
  Cette fonction a été créée pour pouvoir 
  passer n'importe quelle valeur en 
  paramètre sans qu'il ne puisse y avoir 
  de plantage.

@SeeAlso
  @@RunProgram

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function KillProgram(Programme)

@Description
  Termine immédiatement l'exécution 
  du programme spécifié préalablement 
  lancé avec @@RunProgram.

@Parameter "Programme"
  Le programme à terminer. 

@NoReturnValue

@Remarks  
  Cette commande termine l'exécution 
  du programme, mais elle ne ferme pas la 
  connexion avec le programme.
  @@CloseProgram doit toujours être 
  appelé pour libérer les ressources 
  associées avec le programme.

@SeeAlso
  @@CloseProgram

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = NextEnvironmentVariable()

@Description
  Passe à la variable d'environnement 
  suivante dans l'énumération commencée 
  avec @@ExamineEnvironmentVariables. 
  
@NoParameters

@ReturnValue
  Renvoie une valeur non nulle s'il existe 
  encore des variables à lire, zéro sinon.
  
@Remarks
  Les commandes @@EnvironmentVariableName et
  @@EnvironmentVariableValue sont 
  disponibles pour récupérer le nom et 
  la valeur de la variable d'environnement
  courante.

@SeeAlso
  @@ExamineEnvironmentVariables, 
  @@EnvironmentVariableName, 
  @@EnvironmentVariableValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ProgramExitCode(Programme)

@Description
  Renvoie le code de retour d'un programme 
  quand il s'est terminé.
  
@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram.

@ReturnValue
  Le code de retour (exitcode) renvoyé quand 
  le programme spécifié se ferme.

@Remarks  
  Cette commande doit seulement être 
  utilisée après que l'exécution du 
  programme se soit réellement terminée.
  Les commandes @@ProgramRunning ou 
  @@WaitProgram permettent 
  de faire cette vérification.
@LineBreak
@LineBreak
  Le code de retour permet de renvoyer 
  une valeur numérique au programme qui 
  l'a exécuté.
  C'est souvent utilisé pour signaler 
  si une erreur est survenue dans le
  programme lancé.
  De plus, sur OSX et Linux le code de retour est compris entre 0 et 255.
@LineBreak
@LineBreak
  Pour renvoyer un code de retour à 
  partir d'un programme PureBasic, 
  il faut utiliser le paramètre 
  optionnel du mot-clef @Keyword "End":
@Code
  End 1   ; renvoie le code de retour 1
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = ProgramFilename()

@Description
  Renvoie le chemin complet et le nom 
  du programme. 

@NoParameters

@ReturnValue
  Renvoie le chemin complet et le nom 
  du programme.
  
@Remarks
  Utile pour savoir où le programme a été 
  installé ou savoir le nom de l'exécutable. 
  @@GetPathPart et @@GetFilePart permettent 
  d'isoler respectivement le chemin et le 
  nom du fichier à partir de 'Resultat$'.

@Os Windows
@LineBreak
@LineBreak
  Si cette commande est utilisée dans 
  une DLL, cette commande renvoie le 
  chemin et le nom de fichier de
  la DLL, pas celui du programme qui 
  a chargé la DLL.
@EndOS

@SeeAlso
  @@GetPathPart, @@GetFilePart

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ProgramID(Programme)

@Description
  Renvoie l'identifiant système 
  unique d'un programme.

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram.

@ReturnValue
  Renvoie l'identifiant système unique d'un 
  programme, souvent nommé ID ou PID.
  
@Os Windows
@LineBreak
@LineBreak
  Si l'identifiant ne peut être retourné, 
  -1 sera renvoyé.
@LineBreak
  Cela se produit si @@RunProgram est utilisé 
  pour ouvrir un fichier dans un autre 
  programme, comme RunProgram("Source.pb").
@LineBreak
@LineBreak
  Note: la valeur renvoyée ici n'est pas 
  un 'handle' (comme la plupart des 
  autres commandes xxxID()). C'est
  le "Process ID", qui peut être lu 
  dans le 'Gestionnaire des tâches'. 
  Pour obtenir un 'Process handle',
  utiliser l'API OpenProcess_().
@LineBreak
@LineBreak
  Note: La valeur renvoyée peut être fausse si le process est lancé par un wrapper 
  comme c'est le cas avec Windows 10 et les applications UWP (Universal Windows Platform) 
  lancées par ApplicationFrameHost.exe (AFH).
@EndOS

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = ProgramParameter([Index])

@Description
  Renvoie le paramètre suivant qui a 
  été passé à l'exécutable a son lancement.
  
@OptionalParameter "Index"
  Le paramètre à cet index est renvoyé.@LineBreak
  Le premier paramètre commence à 0.
  
@ReturnValue
  Le paramètre suivant, ou une chaîne vide si 
  aucun paramètre n'est trouvé. Si index est 
  spécifié, il renverra la valeur du paramètre 
  spécifié.

@Remarks   
  Cette commande est particulièrement utile avec les @LibraryLink "console" "programmes en mode console", 
  où l'utilisateur passe un ou plusieurs paramètres au démarrage du programme. 
@LineBreak
@LineBreak
  @Bold "Note:" Se baser sur le renvoi d'une chaîne vide pour détecter le dernier paramètre n'est pas forcément l'idéal
  car la commande renverra aussi une chaîne vide si "" est passé sur la ligne de commande.@LineBreak
  Il est recommandé d'utiliser @@CountProgramParameters et d'appeler ProgramParameter() autant de fois que nécessaire.
@LineBreak
@LineBreak
  Pour vérifier le comportement de cette fonction, ou faire plusieurs tests, veuillez lire le paragraphe 'Ligne de commande exécutable' 
  dans la page @ReferenceLink "ide_compiler" "Options du compilateur IDE".

@Example
@Code
  MonProgramme.exe MonTexte.txt /RAPIDE "Mode Special"
@EndCode

  La première fois que ProgramParameter() est appelé, la commande va renvoyer "MonTexte.txt", la seconde 
  fois "/RAPIDE" et la troisième fois "Mode Special".

@Example Executez ce programme (une fois compilé) en ligne de commande avec un fichier en paramètre
@Code
  If OpenWindow(0, 0, 0, 520, 510, "Exemple...", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    EditorGadget(0, 5, 5, 510, 500, #PB_Editor_WordWrap)
    Chemin$ = ProgramParameter()
    If FileSize(path$) >= 0
      If ReadFile(0, Chemin$)
        Texte$ = ReadString(0, #PB_File_IgnoreEOL)
      EndIf
      SetGadgetText(0, Texte$)
    EndIf
    Repeat : Until WaitWindowEvent() = #PB_Event_CloseWindow
  EndIf
@EndCode

@SeeAlso
  @@CreatePreferences

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ProgramRunning(Programme)

@Description
  Teste si un programme est toujours en 
  cours d'exécution. 

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram.

@ReturnValue
  Renvoie une valeur non nulle tant que le 
  programme n'est pas encore terminé, zéro 
  sinon.@LineBreak
  Si le programme a été exécuté avec l'option 
  @#PB_Program_Read, il renverra une valeur 
  non nulle aussi longtemps qu'il y a quelque 
  chose à lire, même si le programme est déjà 
  terminé.

@SeeAlso
  @@RunProgram   
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ReadProgramData(Programme, *Memoire, Taille)

@Description
  Lit les données provenant de la sortie 
  standard (stdout) d'un programme. 

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram en spécifiant 
  l'option @#PB_Program_Read.
  
@Parameter "*Memoire"
  La mémoire tampon dans laquelle seront stockées 
  les données lues.@LineBreak 
  Un tampon de mémoire peut être créé avec 
  @@AllocateMemory.

@Parameter "Taille"
  La taille des données à lire, en octets.@LineBreak  
  Le tampon devra être suffisamment grand pour 
  gérer cette taille.
  
@ReturnValue
  Le nombre d'octets effectivement lus.

@Remarks  
  La commande lit un nombre d'octets jusqu'à la valeur 'Taille', ou moins 
  s'il n'y a pas assez de données  à lire. Par contre, cette commande 
  attendra jusqu'à ce qu'il y ait au  moins un octet avant de quitter,
  donc la valeur 0 pour 'Resultat'  n'est pas possible. 
@LineBreak
@LineBreak
  @Bold "Note:" cette commande bloque jusqu'à  ce qu'il y ait des données à lire. 
  Pour éviter ce blocage, la commande  @@AvailableProgramOutput peut être 
  utilisée pour vérifier si il y a bien des  données en attente.
  @LineBreak
  Cependant la fonction reste bloquée indéfiniment si le programme réclame l'intervention 
  de l'utilisateur. Comme par exemple, renvoyer un choix oui/non au programme pour qu'il 
  se poursuive.  

@SeeAlso
  @@ReadProgramString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = ReadProgramError(Programme [, Options])

@Description
  Lit une ligne de texte provenant de 
  la sortie erreur (stderr) d'un programme.

@Parameter "Programme"
  Le programme à utiliser. 
@LineBreak
@LineBreak  
  Il doit être lancé avant en utilisant 
  @@RunProgram avec l'option @#PB_Program_Error.
  
@OptionalParameter "Options"
 Le format de chaîne de caractères à utiliser 
 pour lire les erreurs en sortie. @LineBreak
 Le format par défaut peut être affecté avec 
 les options @#PB_Program_Ascii, 
 @#PB_Program_Unicode et @#PB_Program_UTF8 
 de la fonction @@RunProgram. @LineBreak
 Peut être l'une des valeurs suivantes:
@FixedFont
  @#PB_Ascii  : Lecture de la sortie d'erreur en ascii
  @#PB_UTF8   : Lecture de la sortie d'erreur en UTF8 (Par défaut)
  @#PB_Unicode: Lecture de la sortie d'erreur en @ReferenceLink "unicode" "unicode"
@EndFixedFont  

@ReturnValue
  Le texte d'erreur, ou une chaîne vide 
  s'il n'y a pas de sortie d'erreur.

@Remarks
  Contrairement à @@ReadProgramData, cette 
  commande n'est pas bloquante, si aucune 
  donnée n'est disponible (une chaîne de 
  caractères vide sera renvoyée).
  
@SeeAlso 
  @@ReadProgramData
 
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = ReadProgramString(Programme [, Options])

@Description
  Lit une ligne de texte provenant de la 
  sortie standard (stdout) d'un programme.

@Parameter "Programme"
  Le programme à utiliser. 
@LineBreak
@LineBreak  
  Il doit être lancé avant en utilisant 
  @@RunProgram avec l'option @#PB_Program_Read.
  
@OptionalParameter "Options"
 Le format de chaîne de caractères à utiliser 
 pour lire le texte en sortie. @LineBreak
 Le format par défaut peut être affecté avec 
 les options @#PB_Program_Ascii, 
 @#PB_Program_Unicode et @#PB_Program_UTF8 
 de la fonction @@RunProgram. @LineBreak
 Peut être l'une des valeurs suivantes:
@FixedFont
  @#PB_Ascii  : Lecture de la sortie d'erreur en ascii
  @#PB_UTF8   : Lecture de la sortie d'erreur en UTF8 (Par défaut)
  @#PB_Unicode: Lecture de la sortie d'erreur en @ReferenceLink "unicode" "unicode"
@EndFixedFont  

@ReturnValue
  Une chaîne créée à partir du texte de 
  sortie du programme.

@Remarks
  Cette commande attend et bloque jusqu'à  ce qu'il y ait des données à lire. 
  Pour éviter ce blocage, la commande  @@AvailableProgramOutput peut être 
  utilisée pour vérifier si il y a bien des données en attente. Cette commande 
  attend également qu'une ligne complète soit reçue. Si une lecture
  binaire est nécessaire, la commande @@ReadProgramData peut être utilisée.
@LineBreak
  Cependant la fonction reste bloquée indéfiniment si le programme réclame l'intervention 
  de l'utilisateur. Comme par exemple, renvoyer un choix oui/non au programme pour qu'il 
  se poursuive.
  
@SeeAlso
  @@ReadProgramData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function RemoveEnvironmentVariable(Nom$)

@Description
  Supprime la variable d'environnement 
  spécifiée du bloc d'environnement du 
  programme.

@Parameter "Nom$"
  La variable d'environnement à supprimer.
  
@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = RunProgram(Fichier$ [, Parametres$, RepertoireCourant$ [, Options [, programmeEmetteur]]])

@Description
  Lance un programme externe. 
  
@Parameter "Fichier$"
  Le nom de l'exécutable, y compris son chemin. 
  
@OptionalParameter "Parametres$"
  Les paramètres de ligne de commande qui 
  seront transmis au programme.
  
@OptionalParameter "RepertoireCourant$"
  Le répertoire qui sera alors le répertoire 
  courant pour le programme lancé.

@OptionalParameter "Options"  
  Peut être l'une des combinaisons suivantes 
  (en utilisant l'opérateur OR '|'):
@FixedFont
  @#PB_Program_Wait   : Attend jusqu'à ce que le programme lancé se termine.
  @#PB_Program_Hide   : Lance le programme en mode invisible.
  @#PB_Program_Open   : Ouvre des canaux de communication entre le programme lancé et le programme PureBasic.
  @#PB_Program_Read   : Lecture possible sur la sortie standard (stdout).
  @#PB_Program_Write  : Ecriture possible sur l'entrée standard (stdin).
  @#PB_Program_Error  : Lecture possible sur la sortie d'erreur(stderr).
  @#PB_Program_Connect: Connecte la sortie d'un autre programme à l'entrée du programme PureBasic.
  @#PB_Program_Ascii  : Les opérations de lecture/écriture se font en ASCII. 
  @#PB_Program_Unicode: Les opérations de lecture/écriture se font en Unicode.
  @#PB_Program_UTF8   : Les opérations de lecture/écriture se font en UTF8. (Par défaut)
@EndFixedFont

  Un programme exécuté avec l'option @#PB_Program_Open doit toujours être 
  fermé avec la commande @@CloseProgram.
  @LineBreak 
  Les options 'Read', 'Write', 'Error' et 'Connect' nécessitent aussi l'option 
  @#PB_Program_Open.
@LineBreak
@LineBreak
  Quand l'option @#PB_Program_Connect est utilisée, un autre programme doit avoir 
  été préalablement lancé avec les options @#PB_Program_Open et @#PB_Program_Read. 
  Le numéro renvoyé par @@RunProgram doit être passé dans le paramètre 
  'ProgrammeEmetteur'. 
  
@OptionalParameter "ProgrammeEmetteur" 
  L'option @#PB_Program_Connect est nécessaire, doit contenir le numéro renvoyé d'un 
  autre programme démarré auparavant avec RunProgram() avec les options 
  @#PB_Program_Open et @#PB_Program_Read.@LineBreak
  La sortie du programme émetteur sera envoyée directement à l'entrée du programme 
  maintenant exécuté. Plusieurs programmes peuvent être connectés de cette manière, 
  pour "canaliser" (pipe) les données via ce groupe de programmes connectés.

@Remarks  
  Les commandes suivantes peuvent être utilisées lorsque l'option @#PB_Program_Open est spécifiée:
@LineBreak
@LineBreak
 - @@IsProgram: teste si le numéro représente un programme lancé avec RunProgram().
@LineBreak
 - @@ProgramID: renvoie l'identifiant système du programme.
@LineBreak
 - @@ProgramRunning: teste si le programme est toujours en cours d'exécution.
@LineBreak
 - @@WaitProgram: attend la fin du programme.
@LineBreak
 - @@KillProgram: force le programme à quitter.
@LineBreak
 - @@ProgramExitCode: renvoie le code de retour du programme.
@LineBreak
 - @@CloseProgram: ferme les connexions du programme et libère les ressources.
@LineBreak
@LineBreak
  Les commandes suivantes peuvent être utilisées par les programmes lancés 
  avec les options @#PB_Program_Read, @#PB_Program_Write ou @#PB_Program_Error:
@LineBreak
@LineBreak
 - @@AvailableProgramOutput: teste si des données sont disponibles.
@LineBreak
 - @@ReadProgramString: lit une ligne à partir de la sortie standard du 
 programme exécuté.
@LineBreak
 - @@ReadProgramData: lit des données binaires à partir de la sortie standard 
 du programme exécuté.
@LineBreak
 - @@ReadProgramError: lit une ligne à partir de la sortie erreur du programme exécuté.
@LineBreak
 - @@WriteProgramString: écrit une ligne sur l'entrée standard du programme exécuté.
@LineBreak
 - @@WriteProgramData: écrit des données binaires sur l'entrée standard du programme 
 exécuté.
 
@ReturnValue  
  Renvoie une valeur non nulle si le programme 
  a été lancé avec succès, zéro sinon.
@Linebreak
@Linebreak  
  Si l'option @#PB_Program_Open est utilisée, 
  'Resultat' contient le numéro qui identifie 
  le nouveau programme lancé.
  @@ReadProgramString ou @@ProgramExitCode
  ou d'autres fonctions déjà mentionnées 
  peuvent alors être utilisé pour obtenir 
  des informations sur ce nouveau programme.

@Example
@Code
  ; Exécute le compilateur PureBasic avec l'option -h et affiche la sortie
  ;
  Compilateur = RunProgram(#PB_Compiler_Home+"compilers/pbcompiler", "-h", "", #PB_Program_Open | #PB_Program_Read)
  Sortie$ = ""
  If Compilateur 
    While ProgramRunning(Compilateur)
      If AvailableProgramOutput(Compilateur)
        Sortie$ + ReadProgramString(Compilateur) + Chr(13)
      EndIf
    Wend
    Sortie$ + Chr(13) + Chr(13)
    Sortie$ + "Code de retour : " + Str(ProgramExitCode(Compilateur))
    
    CloseProgram(Compilateur) ; Ferme la connexion vers le programme
  EndIf
  
  MessageRequester("Sortie", Sortie$)
@EndCode  

@OS Windows
  Sous Windows RunProgram() utilise 
  l'application par défaut associée à un 
  type de fichier.
  Par exemple: RunProgram("Test.html") 
  ouvrira le navigateur par défaut 
  configuré sur votre système. 
@EndOS
  
@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function SetEnvironmentVariable(Nom$, Valeur$)

@Description
  Crée une nouvelle variable d'environnement.

@Parameter "Nom$"
  Le nom de la nouvelle variable.

@Parameter "Valeur$"
  La valeur associée à la variable.

@NoReturnValue

@Remarks  
  Si la variable d'environnement existait 
  déjà, sa valeur est automatiquement 
  remplacée.
@Linebreak
@Linebreak
  Les variables d'environnement sont 
  automatiquement héritées par les 
  programmes lancés avec @@RunProgram, 
  donc il est possible de passer un grand 
  nombre d'informations au nouveau programme 
  en utilisant cette méthode (le programme 
  exécuté pourra utiliser
  @@GetEnvironmentVariable pour lire le 
  contenu des variables). 

@SeeAlso
  @@GetEnvironmentVariable

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = WaitProgram(Programme [, Minuteur])

@Description
  Arrête l'exécution du code jusqu'à ce 
  que le Programme spécifié se termine, 
  ou que le minuteur expire. 

@Parameter "Programme"
  Le programme à utiliser.
@LineBreak 
@LineBreak
  Le programme doit avoir été lancé 
  avec @@RunProgram.

@OptionalParameter "Minuteur"
  Le délai à utiliser, en millisecondes.

@ReturnValue
  Renvoie une valeur non nulle si le programme 
  a quitté, zéro si le délai a été atteint.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = WriteProgramData(Programme, *Memoire, Taille)

@Description
  Ecrit des données dans l'entrée standard 
  (stdin) d'un programme. 

@Parameter "Programme"
  Le programme à utiliser.
@Linebreak
@Linebreak  
  Il doit être lancé avant avec 
  @@RunProgram avec l'option 
  @#PB_Program_Write.
  
@Parameter "*Memoire" 
  La mémoire tampon qui contient les données 
à écrire.  
@Linebreak
@Linebreak  
   La valeur spéciale @#PB_Program_Eof 
  peut être passée dans le paramètre 
  '*Memoire' pour que le programme 
  reçoive un signal EOF (fin de fichier) 
  ce qui indique qu'il n'y a plus de données 
  à transmettre. Le paramètre 'Taille' est 
  ignoré dans ce cas. 
  Après avoir appelé WriteProgramData() avec 
  cette valeur spéciale, plus rien ne 
  peut être écrit dans l'entrée standard 
  du programme. 

@Parameter "Taille"
  La taille des données à écrire.

@ReturnValue
  Le nombre d'octet effectivement écrit.
 
@SeeAlso
  @@WriteProgramString, 
  @@WriteProgramStringN

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function WriteProgramString(Programme, Texte$ [, Options])

@Description
  Ecrit un texte dans l'entrée standard 
  (stdin) d'un programme.
  
@Parameter "Programme"
  Le programme à utiliser.
@Linebreak
@Linebreak  
  Il doit être lancé avant avec 
  @@RunProgram avec l'option 
  @#PB_Program_Write.
  
@Parameter "Texte$"
  Le texte à écrire avec un caractère 
  retour à la ligne à la fin.
@Linebreak
@Linebreak 
  Pour inclure le saut de ligne, 
  @@WriteProgramStringN peut être 
  utilisé.@Linebreak 
  Pour écrire des données brutes, 
  @@WriteProgramData peut être utilisé.
  @Linebreak 
  Cette fonction peut également être 
  utilisée pour envoyer un EOF (fin 
  de fichier) qui indique au programme 
  qu'il n'y a plus de données.

@OptionalParameter "Options"
  Le format de la chaîne de caractères 
  à utiliser. @LineBreak
  Le format par défaut peut être affecté avec 
  les options @#PB_Program_Ascii, 
  @#PB_Program_Unicode et @#PB_Program_UTF8 
  de la fonction @@RunProgram. @LineBreak
  Peut prendre l'une des valeurs suivantes
@FixedFont
  @#PB_Ascii  : Écrit la chaîne en ascii
  @#PB_UTF8   : Écrit la chaîne en UTF8 (Par défaut)
  @#PB_Unicode: Écrit la chaîne en @ReferenceLink "unicode" "unicode"
@EndFixedFont 

@NoReturnValue

@SeeAlso
  @@WriteProgramStringN, 
  @@ReadProgramString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function WriteProgramStringN(Programme, Texte$ [, Options])

@Description
  Ecrit un texte dans l'entrée standard 
  (stdin) d'un programme en ajoutant 
  automatiquement un caractère 
  retour à la ligne. 
  
@Parameter "Programme"
  Le programme à utiliser.
@Linebreak
@Linebreak  
  Il doit être lancé avant avec 
  @@RunProgram avec l'option 
  @#PB_Program_Write.

@Parameter "Texte$"
  Le texte à écrire avec un caractère 
  retour à la ligne à la fin.
@Linebreak
@Linebreak   
  Pour écrire un texte sans retour de 
  ligne, la commande @@WriteProgramString 
  est disponible.@LineBreak
  Pour écrire autre chose que du texte 
  dans l'entrée standard, la commande 
  @@WriteProgramData est disponible. 
  @LineBreak
  Elle permet entre autre d'envoyer 
  le signal @#PB_Program_Eof (EOF, End 
  Of File) qui indique au programme 
  qu'il n'y a plus d'entrée.
  
@OptionalParameter "Options"
  Le format de la chaîne de caractères 
  à utiliser. @LineBreak
  Le format par défaut peut être affecté avec 
  les options @#PB_Program_Ascii, 
  @#PB_Program_Unicode et @#PB_Program_UTF8 
  de la fonction @@RunProgram. @LineBreak
  Peut prendre l'une des valeurs suivantes
@FixedFont
  @#PB_Ascii  : Écrit la chaîne en ascii
  @#PB_UTF8   : Écrit la chaîne en UTF8 (Par défaut)
  @#PB_Unicode: Écrit la chaîne en @ReferenceLink "unicode" "unicode"
@EndFixedFont 

@NoReturnValue

@SeeAlso
  @@WriteProgramString, 
  @@ReadProgramString  

@SupportedOS
