;
;     Network library documentation
;
;      (c) 2025 - Fantaisie Software
;

@Library Network

@Overview

PureBasic supports the official protocol to exchange data
via the internet: @InternetLink "https://en.wikipedia.org/wiki/Internet_protocol_suite" "TCP/IP" in both IPv4 and IPv6 form.
This means that games and applications can be written using the well-established 
client/server model. With these functions, its possible to
create any kind of internet-related application (browsers, web servers, ftp clients, etc) or even multiplayer games. @LineBreak
@LineBreak
It also fully supports TLS encryption through the @InternetLink "https://www.libressl.org/" "LibreSSL" library.

@CommandList

@ExampleFile All NetworkClient.pb
@ExampleFile All NetworkServer.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseNetworkConnection(Connection)

@Description
  Close the specified connection. 
  
@Parameter "Connection"
  The connection to close. This is the result of either a call to
  @@OpenNetworkConnection or @@EventClient.
  
@NoReturnValue
  
@Remarks
  If a client calls this function the server will receive a @#PB_NetworkEvent_Disconnect event. 
  If this function is called from a server the connection will be closed without further notice to the client. 
  When a server receives a @#PB_NetworkEvent_Disconnect event its associated client connection is automatically 
  closed and CloseNetworkConnection() must not be called in this case.
@LineBreak
@LineBreak
  All remaining opened connections are automatically closed when the program ends.

@SeeAlso
  @@OpenNetworkConnection, @@EventClient, @@CloseNetworkServer
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ConnectionID(Connection)

@Description
  Returns the unique system identifier of the connection.
  
@Parameter "Connection"
  The connection to use. This is the result of either a call to
  @@OpenNetworkConnection or @@EventClient.
  
@ReturnValue
  Returns the system identifier. 
  This result is sometimes also known as 'Handle'. Look at the extra chapter @ReferenceLink "handles" "Handles and Numbers" for
  more information.
  
@SeeAlso
  @@ServerID
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ServerID(#Server)

@Description
  Returns the unique system identifier of the server.
 
@Parameter "#Server"
  The server to use.
  
@ReturnValue
  Returns the system identifier.
  This result is sometimes also known as 'Handle'. Look at the extra chapter @ReferenceLink "handles" "Handles and Numbers" for
  more information.

@SeeAlso
  @@ConnectionID
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseNetworkServer(#Server)

@Description
  Shutdown the specified running server. All clients connected to this 
  server are automatically removed. The port is freed and can be reused.
  
@Parameter "#Server"
  The server to close.
  
@NoReturnValue

@SeeAlso
  @@CreateNetworkServer, @@CloseNetworkConnection

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CreateNetworkServer(#Server, Port [, Flags [, BoundIP$]])

@Description
  Create a new network server on the local computer using the specified port. To support TLS encryption, @@UseNetworkTLS needs to be
  called before this command and a TLS flag needs to be specified.

@Parameter "#Server"
  A number to identify the new server.
  @ReferenceLink "purebasic_objects" "#PB_Any" can be used to auto-generate this number.

@Parameter "Port"
  The port to use for the server.
  Port values can range from 6000 to 7000 (this is a recommended area space, 
  but it can go from 0 to 65000 in reality). 

@OptionalParameter "Flags"
  Can be one of the following values:
@FixedFont
  @#PB_Network_TCP: the server will use the @InternetLink "http://en.wikipedia.org/wiki/Transmission_Control_Protocol" "TCP network protocol" (default)
  @#PB_Network_UDP: the server will use the @InternetLink "http://en.wikipedia.org/wiki/User_Datagram_Protocol" "UDP network protocol"
@EndFixedFont
  combined with one of the following values (using the '|' operand):
@FixedFont
  @#PB_Network_IPv4: create a server using IPv4 (default)
  @#PB_Network_IPv6: create a server using IPv6
@EndFixedFont
  combined with one of the following values (using the '|' operand):
@FixedFont
  @#PB_Network_NoTLS  : no encryption will be used for this server (default)
  @#PB_Network_TLSv1  : all non-deprecated TLS protocols will be supported (currently v1.2 and v1.3)
  @#PB_Network_TLSv1_0: TLS v1.0 protocol will be supported (warning, this protocol is deprecated for security reasons)
  @#PB_Network_TLSv1_1: TLS v1.1 protocol will be supported (warning, this protocol is deprecated for security reasons)
  @#PB_Network_TLSv1_2: TLS v1.2 protocol will be supported
  @#PB_Network_TLSv1_3: TLS v1.3 protocol will be supported
@EndFixedFont
 
@OptionalParameter "BoundIP$"
  The local IP address to bind the server. By default, the server is created on all available local interfaces, and accept
  connections from them. It can be useful to restrict the server to only one interface (for example "127.0.0.1")
  to avoid connection attempt from other interfaces. On Windows, binding only to the localhost avoid to trigger the
  built-in firewall.

@ReturnValue
  Returns nonzero if the server was created successfully and zero if creation 
  failed, for example, due to the port being already in use. 
  If #PB_Any was used as the #Server parameter then the generated number is returned on success. 
  
@Remarks
  Any number of servers can run simultaneously on the same computer, the only restriction
  being that two servers can not run using the same port and the same protocol (@#PB_Network_TCP and @#PB_Network_UDP).
  It's possible to create two servers using the same port, one using IPv4 and the other using IPv6.
  @@NetworkServerEvent can be used to monitor server for events.

@SeeAlso
  @@OpenNetworkConnection, @@CloseNetworkServer, @@NetworkServerEvent, @@UseNetworkTLS

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ExamineIPAddresses([Format]) 

@Description
  Start examining the available IP addresses on the local computer. @@NextIPAddress is used
  to retrieve each IP.
  
@OptionalParameter "Format"
  The format of the IP to examine. It can be one of the following value:
@FixedFont  
  @#PB_Network_IPv4: examine IPv4 addresses (default).
  @#PB_Network_IPv6: examine IPv6 addresses. Returned addresses needs to be freed with @@FreeIP after use.
@EndFixedFont

@ReturnValue
  Returns nonzero if examining the addresses works and zero if it failed.
  
@Example IPv4
@Code
  If ExamineIPAddresses()
    Repeat
      IP = NextIPAddress()
      If IP
        Debug "IPv4: " + IPString(IP) 
      EndIf
    Until IP = 0
  EndIf
@EndCode

@Example IPv6
@Code
  If ExamineIPAddresses(#PB_Network_IPv6)
    Repeat
      IP = NextIPAddress()
      If IP
        Debug "IPv6: " + IPString(IP, #PB_Network_IPv6) 
        FreeIP(IP)                                     
      EndIf
    Until IP = 0
  EndIf
@EndCode

@SeeAlso
  @@NextIPAddress
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeIP(IPAddress) 

@Description
  Free an IPv6 address. This function only works with IPv6 addresses returned by @@MakeIPAddress, @@NextIPAddress
  and @@GetClientIP, and must not be used with IPv4 addresses.
  
@Parameter "IPAddress"
  The IPv6 address to free.

@NoReturnValue
  
@SeeAlso
  @@NextIPAddress, @@MakeIPAddress, @@GetClientIP
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function String$ = HostName() 

@Description
  Returns the computer's hostname.
  
@NoParameters

@ReturnValue
  Returns the host name.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function String$ = IPString(IPAddress [, Format]) 

@Description
  Returns the string representation in dotted form (ie: "127.0.0.1" for IPv4 or "::1" for IPv6) of the specified numerical IPAddress. 

@Parameter "IPAddress"
  The IP address. For IPv6, this address needs to be the result of @@MakeIPAddress, @@NextIPAddress or @@GetClientIP.

@OptionalParameter "Format"
  The format of the IP to convert. It can be one of the following value:
@FixedFont  
  @#PB_Network_IPv4: convert an IPv4 address (default).
  @#PB_Network_IPv6: convert an IPv6 address.
@EndFixedFont

@ReturnValue
  Returns the IP address as a string.
  
@SeeAlso
  @@MakeIPAddress, @@IPAddressField
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IPAddressField(IPAddress, Field [, Format])

@Description
  Returns the given field value of the specified IP address. 
  
@Parameter "IPAddress"
  The IP address. For IPv6, this address needs to be created with @@MakeIPAddress.

@Parameter "Field"
  The field to return. This value can be a value between 0 and 3 
  (0 being the leftmost value, 3 being the rightmost) for IPv4 and 0 to 7 for IPv6.

@OptionalParameter "Format"
  The format of the IP. It can be one of the following value:
@FixedFont  
  @#PB_Network_IPv4: an IPv4 address (default).
  @#PB_Network_IPv6: an IPv6 address.
@EndFixedFont
 
@ReturnValue
  Returns the value of the specified field, in the range 0 to 255.
  
@Remarks
  This function is especially useful with:
@LineBreak  
@LineBreak
  - @@IPAddressGadget
@LineBreak
  - @@MakeIPAddress
  
@SeeAlso
  @@MakeIPAddress, @@IPString, @@IPAddressGadget
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = MakeIPAddress(Field0, Field1, Field2, Field3 [, Field4, Field5, Field6, Field7]) 

@Description
  Returns the equivalent numeric value of the specified IP address.
  
@Parameter "Field0, Field1, Field2, Field3"
  The individual fields of the address.  
  Each field can only have a value between 0 and 255. 
  
@OptionalParameter "Field4, Field5, Field6, Field7"
  The remaining individual fields for IPv6 address.
  Each field can only have a value between 0 and 255. 
  When these fields are specified, an IPv6 address is created. When the address is no more needed, it has
  to be manually freed with @@FreeIP. IPv4 address must not be freed with @@FreeIP.

@ReturnValue
  Returns the IP address.
  
@Remarks
   This function is especially useful with:
@LineBreak  
@LineBreak
  - @@IPAddressGadget
  
@SeeAlso
  @@IPString, @@IPAddressField
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Server = EventServer() 

@Description
  This function returns the number of the server which has received
  data, allowing multiple servers to be managed on one computer.
  It is only needed on the server side. 
  
@NoParameters

@ReturnValue
  Returns the #Server number of the server causing the event.

@SeeAlso
  @@NetworkServerEvent, @@EventClient

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Connection = EventClient() 

@Description
  This function returns the connection of the client that sent data and is only needed on the server side.
   
@NoParameters

@ReturnValue
  Returns the connection of the client that caused the event.
   
@Remarks
  The functions @@GetClientIP and @@GetClientPort can be used to get more information on the client that sent data. 

@SeeAlso
  @@NetworkServerEvent, @@GetClientIP, @@GetClientPort

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function IP = GetClientIP(Client) 

@Description
  This function returns the IP address of the client and should be called after EventClient(). 
  If the connection is an IPv6 connection the returned address must be freed with FreeIP().
  
@Parameter "Client"
  The client for which to get the IP.

@ReturnValue
  Returns the IP address of the client.

@SeeAlso
  @@GetClientPort, @@IPString, @@EventClient

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Port = GetClientPort(Client) 

@Description
  Returns the client port and should be called after @@EventClient.

@Parameter "Client"
  The client for which to get the port.

@ReturnValue
  Returns the port of the client.

@SeeAlso
  @@GetClientIP, @@EventClient

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NetworkClientEvent(Connection) 

@Description
  Checks if an event happened on a network connection created with @@OpenNetworkConnection.

@Parameter "Connection"
  The connection to check.

@ReturnValue
  Returns one of the following values:
@FixedFont
  @#PB_NetworkEvent_None      : Nothing has happened
  @#PB_NetworkEvent_Data      : Raw data has been received (to be read with @@ReceiveNetworkData)
  @#PB_NetworkEvent_Disconnect: The client has been disconnected (connection closed).
@EndFixedFont

@SeeAlso
  @@ReceiveNetworkData, @@NetworkServerEvent

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NetworkServerEvent([#Server]) 

@Description
  Checks if an event happened on one of the open network servers.

@OptionalParameter "#Server"
  The server to use to check the events. When used, only the events which belongs to this
  server are handled, all other events are left untouched.

@ReturnValue
  Returns one of the following values:
@FixedFont
  @#PB_NetworkEvent_None      : Nothing has happened
  @#PB_NetworkEvent_Connect   : A new client has been connected to the server (not available with @#PB_Network_UDP connections)
  @#PB_NetworkEvent_Data      : Raw data has been received (to be read with @@ReceiveNetworkData)
  @#PB_NetworkEvent_Disconnect: A client has quit the server (disconnection). Its associated connection is 
                               automatically closed, @@CloseNetworkConnection must not be called for this client.
                               (Not available with @#PB_Network_UDP connections.)
@EndFixedFont

@Remarks
  The server that received the event can be determined with @@EventServer. The client that caused the event
  can be determined with @@EventClient.

@SeeAlso
  @@ReceiveNetworkData, @@EventServer, @@EventClient, @@CreateNetworkServer

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NextIPAddress()

@Description
  Returns the next IP address of the local machine. @@ExamineIPAddresses must be called
  before this command. 

@NoParameters

@ReturnValue
  Returns the next IP address in numerical form. If the result is 0 then there are no more IP addresses to be examined.
  If @@ExamineIPAddresses is called with the @#PB_Network_IPv6 format, the returned IP needs to freed with @@FreeIP after use.

@Example IPv4
@Code
  If ExamineIPAddresses()
    Repeat
      IP = NextIPAddress()
      If IP
        Debug "IPv4: " + IPString(IP) 
      EndIf
    Until IP = 0
  EndIf
@EndCode

@Example IPv6
@Code
  If ExamineIPAddresses(#PB_Network_IPv6)
    Repeat
      IP = NextIPAddress()
      If IP
        Debug "IPv6: " + IPString(IP, #PB_Network_IPv6) 
        FreeIP(IP)                                     
      EndIf
    Until IP = 0
  EndIf
@EndCode

@SeeAlso
  @@ExamineIPAddresses, @@IPString
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Connection = OpenNetworkConnection(ServerName$, Port [, Flags [, TimeOut [, LocalIP$ [, LocalPort]]]]) 

@Description
  Opens a network connection to the specified server. To support TLS encryption, @@UseNetworkTLS needs to be
  called before this command and a TLS flag needs to be specified.

@Parameter "ServerName$"
  The server to connect to. This can be an 
  IP address or a full name (ie: "127.0.0.1" or "ftp.home.net").
  
@Parameter "Port"
  The port on the server to connect to.

@OptionalParameter "Flags"
  This can be one of the following values:
@FixedFont
  @#PB_Network_TCP: The connection will use the @InternetLink "http://en.wikipedia.org/wiki/Transmission_Control_Protocol" "TCP network protocol" (default)
  @#PB_Network_UDP: The connection will use the @InternetLink "http://en.wikipedia.org/wiki/User_Datagram_Protocol" "UDP network protocol". The connection will not be
                   explicitly created, as UDP is a connectionless protocol, but it will add an 
                   entry in the PureBasic management stack and allow to send data via UDP using 
                   the regular @@SendNetworkData (and related) functions.
@EndFixedFont
  combined with one of the following values (using the '|' operand):
@FixedFont
  @#PB_Network_IPv4: open the connection using IPv4 (default)
  @#PB_Network_IPv6: open the connection using IPv6
@EndFixedFont
  combined with one of the following values (using the '|' operand):
@FixedFont
  @#PB_Network_NoTLS  : no encryption will be supported for this connection (default)
  @#PB_Network_TLSv1  : all non-deprecated TLS protocols will be supported (currently v1.2 and v1.3)
  @#PB_Network_TLSv1_0: TLS v1.0 protocol will be supported (warning, this protocol is deprecated for security reasons)
  @#PB_Network_TLSv1_1: TLS v1.1 protocol will be supported (warning, this protocol is deprecated for security reasons)
  @#PB_Network_TLSv1_2: TLS v1.2 protocol will be supported
  @#PB_Network_TLSv1_3: TLS v1.3 protocol will be supported
@EndFixedFont

@OptionalParameter "TimeOut"
  The maximum time (in milliseconds) before aborting the connection attempt. Usually, it shouldn't be
  set to a too low value (less than 5000 milliseconds), as initializing a connection over the net
  can take some time.

@OptionalParameter "LocalIP$"
  The local IP address to bind the connection to.

@OptionalParameter "LocalPort"
  The local port to bind the connection to. By default a random local port is automatically chosen for the new connection,
  but it can be overridden with this parameter.

@ReturnValue
  Returns the connection identifier for the opened connection if the connection was established correctly.
  If there was an error the result is zero.

@SeeAlso
  @@NetworkClientEvent, @@SendNetworkData, @@ReceiveNetworkData, @@CloseNetworkConnection, @@UseNetworkTLS

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ReceiveNetworkData(Connection, *DataBuffer, DataBufferLength)  

@Description
  Receives raw data from the specified client. This function can be used by both client and server applications 
  and should be called only after having received a @#PB_NetworkEvent_Data event.
  
@Parameter "Connection"
  The connection to receive data from.
  On the server side 'Connection' is the client which has send the data (can be easily obtained with 
  @@EventClient).
  On client side, 'Connection' is returned by @@OpenNetworkConnection. 

@Parameter "*DataBuffer"
  The memory address to receive the data to.

@Parameter "DataBufferLength"
  The length of the buffer to receive data to.

@ReturnValue
  Returns the number of bytes received. If 'Result' is equal to DataBufferLength then more data is available to be read.
  If an error occurred on the connection (link broken, connection close by the server etc...) 'Result' will be -1. 
  
@Remarks
  On UDP connections, the maximum 'DataBufferLength' is 2048. On TCP connections, the maximum 'DataBufferLength' is 65536.

@SeeAlso
  @@NetworkClientEvent, @@NetworkServerEvent, @@SendNetworkData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SendNetworkData(Connection, *MemoryBuffer, Length)

@Description
  Sends raw data to the specified client. This function can be used by both 
  client and server applications. 

@Parameter "Connection"
  The connection to send data to.
  On the server side, 'Connection' is the client which should receive this data. 
  On the client side, 'Connection' is returned by @@OpenNetworkConnection. 

@Parameter "*MemoryBuffer"
  The address of the data to send.

@Parameter "Length"
  The length of the data to send.

@ReturnValue
  Returns the number of bytes actually sent. If the number of bytes returned is not equal 
  to the 'Length' parameter the receiving buffer of the user is probably full. 
  If nothing could be sent then 'Result' will equal -1. 

@Remarks
  On UDP connections, the maximum 'Length' is 2048. On TCP connections, the maximum 'Length' is 65536.

@SeeAlso
  @@SendNetworkString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SendNetworkString(Connection, String$ [, Format])

@Description
  Send a string to the specified client. This function can be used by both 
  client and server applications. 
  
@Parameter "Connection"
  The connection to send the string to.
  On the server side, 'Connection' is the client which should receive this data. 
  On the client side, 'Connection' is returned by @@OpenNetworkConnection. 
  
@Parameter "String$"
  The string to send.

@OptionalParameter "Format"
  The string format to use when sending the string. This can be one of the following values:
@FixedFont
  @#PB_Ascii  : sends the strings as ASCII
  @#PB_UTF8   : sends the strings as UTF8 (default) 
  @#PB_Unicode: send the strings as unicode
@EndFixedFont

@ReturnValue
  Returns the number of bytes sent.
  
@Remarks
  SendNetworkString() provides a solution to quickly send strings. The string will be sent without the
  terminating null-character, and can be received using @@ReceiveNetworkData, after 
  @@NetworkServerEvent / @@NetworkClientEvent returned @#PB_NetworkEvent_Data).
  In @ReferenceLink "unicode" "unicode" mode the string is sent as UTF-8, which is processor independent (unlike UTF-16 which is tied to processor endianness).
  There is no ReceiveNetworkString() command.

@SeeAlso
  @@SendNetworkData, @@ReceiveNetworkData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UseNetworkTLS([PrivateKey$, Certificate$ [, CaCertificate$]])

@Description
  Enable and configure TLS support for network library. This command must be called before using @@CreateNetworkServer or @@OpenNetworkConnection with the TLS flags.
  
@OptionalParameter "PrivateKey$"
  The private key to use for TLS when using @@CreateNetworkServer. When using TLS only with @@OpenNetworkConnection, this parameter is not needed. It should be in following format:
@Code  
  "-----BEGIN PRIVATE KEY-----"+#LF$+ "MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAPEbSQq/uwESZduPtDd83qXXkSPf6lUNa17xhM2fOZQxGr0Fdmvw6IsC+QGX25EE1TG6TFQkHlM2rW8y6a3WEC/WzCNWaTCPYD/rguiAFG+4eQmwHjiJFVec0InjjSG9SX8xwS/gQeWdQniKROO4DmMJO8N7mdUhdHODSntXdr9zAgMBAAECgYAE+VMgbaQl+YMwbF6DZogRU8kivFPRPV2hr8nVlBtT+09Z5uryfx3NAFqytbdJ3penVviMI9KcVNxvFtXLSEc9KyjzgysorAfUpwFuECCLDbOXX0HlV6rgkqJdhyV6FybcDLvgcvulHQ64QdYRhW+jPx7vXk3h0/JRFqKQJsY7QQJBAPrDLJRPbAw+Mlq1fHBWk8Z1Qn1ivPAmz+2nPAgDya/xdAlb9GbFAMzCS3upIBpxW70uLI04OuTVhwYL194I5C0CQQD2JHtHp25SkIDpBgZGicEC7yAIE/wPC0P9X85UJqXx5dPx4HbEc8lqSKMbCzkbHyvjHonSHu00QxU1W6ZALFYfAkBcPWzphSl+e2Z0XWvPutkS2FFD5A0R3YUAq1J2tEX9NTj0tGF7aB36M8ImU7jeYTJYrWJv8+4d/Ll1LOgT4XtlAkAxofOV5EYTsf28fzF+wcJAtDUyS81Uv0HLcqkpQM3PdDeDm253eJ2Rp+nzxxSRynxQBNVnoELWefxp0Pw6DnajAkBF5h7fQIbwAEPrhDzhjMXU7g9k9KzkkJN/bluLbleqkkAz1kfkGtWXJdGITZuY4K/X2yp1diWQ0utZjmOmhWsl"+#LF$+
  "-----END PRIVATE KEY-----"
@EndCode

@OptionalParameter "Certificate$"
  The certificat to use for TLS when using @@CreateNetworkServer. When using TLS only with @@OpenNetworkConnection, this parameter is not needed. It should be in following format:
@Code  
  "-----BEGIN CERTIFICATE-----"+#LF$+ "MIICnTCCAgYCCQD0AWy2vzfcpzANBgkqhkiG9w0BAQUFADCBkjELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xHDAaBgNVBAsTE09yZ2FuaXphdGlvbmFsIFVuaXQxLzAtBgNVBAMTJkNvbW1vbiBOYW1lIChlLmcuLCB5b3VyIHNlcnZlciBkb21haW4pMB4XDTI0MTEwNjE2NTI1N1oXDTI0MTIwNjE2NTI1N1owgZIxCzAJBgNVBAYTAlVTMQ4wDAYDVQQIEwVTdGF0ZTENMAsGA1UEBxMEQ2l0eTEVMBMGA1UEChMMT3JnYW5pemF0aW9uMRwwGgYDVQQLExNPcmdhbml6YXRpb25hbCBVbml0MS8wLQYDVQQDEyZDb21tb24gTmFtZSAoZS5nLiwgeW91ciBzZXJ2ZXIgZG9tYWluKTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA8RtJCr+7ARJl24+0N3zepdeRI9/qVQ1rXvGEzZ85lDEavQV2a/DoiwL5AZfbkQTVMbpMVCQeUzatbzLprdYQL9bMI1ZpMI9gP+uC6IAUb7h5CbAeOIkVV5zQieONIb1JfzHBL+BB5Z1CeIpE47gOYwk7w3uZ1SF0c4NKe1d2v3MCAwEAATANBgkqhkiG9w0BAQUFAAOBgQCprm5a5bg1LqCDdtwDTnRDmVcca6HoUlvbjZLmWdLjltG1McNAATppTy/bF7vT3jXLobA1Vzs2g14POjYQhPnIbRPEnNzvAe+Se3y0YeFOwYarEyFBHKHODGIPaCnXGH8gB9fgcp2SYtLaPKvXdNL44VeYGbD4+fvUcu/zkXqTSg=="+#LF$+
  "-----END CERTIFICATE-----"
@EndCode

@OptionalParameter "CaCertificate$"
  The intermediate authority certificate who issued the 'Certificate$' to use for TLS when using @@CreateNetworkServer. When using TLS only with @@OpenNetworkConnection, this parameter is not needed. It should be in the same format than 'Certificate$'.

@NoReturnValue

@Example TLS Server
@Code
  Timeout = 15000 ; 15 secs overall timeout

  PrivateKey$ = "-----BEGIN PRIVATE KEY-----"+#LF$+
         "MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAPEbSQq/uwESZduPtDd83qXXkSPf6lUNa17xhM2fOZQxGr0Fdmvw6IsC+QGX25EE1TG6TFQkHlM2rW8y6a3WEC/WzCNWaTCPYD/rguiAFG+4eQmwHjiJFVec0InjjSG9SX8xwS/gQeWdQniKROO4DmMJO8N7mdUhdHODSntXdr9zAgMBAAECgYAE+VMgbaQl+YMwbF6DZogRU8kivFPRPV2hr8nVlBtT+09Z5uryfx3NAFqytbdJ3penVviMI9KcVNxvFtXLSEc9KyjzgysorAfUpwFuECCLDbOXX0HlV6rgkqJdhyV6FybcDLvgcvulHQ64QdYRhW+jPx7vXk3h0/JRFqKQJsY7QQJBAPrDLJRPbAw+Mlq1fHBWk8Z1Qn1ivPAmz+2nPAgDya/xdAlb9GbFAMzCS3upIBpxW70uLI04OuTVhwYL194I5C0CQQD2JHtHp25SkIDpBgZGicEC7yAIE/wPC0P9X85UJqXx5dPx4HbEc8lqSKMbCzkbHyvjHonSHu00QxU1W6ZALFYfAkBcPWzphSl+e2Z0XWvPutkS2FFD5A0R3YUAq1J2tEX9NTj0tGF7aB36M8ImU7jeYTJYrWJv8+4d/Ll1LOgT4XtlAkAxofOV5EYTsf28fzF+wcJAtDUyS81Uv0HLcqkpQM3PdDeDm253eJ2Rp+nzxxSRynxQBNVnoELWefxp0Pw6DnajAkBF5h7fQIbwAEPrhDzhjMXU7g9k9KzkkJN/bluLbleqkkAz1kfkGtWXJdGITZuY4K/X2yp1diWQ0utZjmOmhWsl"+#LF$+
         "-----END PRIVATE KEY-----"

  Cert$ = "-----BEGIN CERTIFICATE-----"+#LF$+
          "MIICnTCCAgYCCQD0AWy2vzfcpzANBgkqhkiG9w0BAQUFADCBkjELMAkGA1UEBhMCVVMxDjAMBgNVBAgTBVN0YXRlMQ0wCwYDVQQHEwRDaXR5MRUwEwYDVQQKEwxPcmdhbml6YXRpb24xHDAaBgNVBAsTE09yZ2FuaXphdGlvbmFsIFVuaXQxLzAtBgNVBAMTJkNvbW1vbiBOYW1lIChlLmcuLCB5b3VyIHNlcnZlciBkb21haW4pMB4XDTI0MTEwNjE2NTI1N1oXDTI0MTIwNjE2NTI1N1owgZIxCzAJBgNVBAYTAlVTMQ4wDAYDVQQIEwVTdGF0ZTENMAsGA1UEBxMEQ2l0eTEVMBMGA1UEChMMT3JnYW5pemF0aW9uMRwwGgYDVQQLExNPcmdhbml6YXRpb25hbCBVbml0MS8wLQYDVQQDEyZDb21tb24gTmFtZSAoZS5nLiwgeW91ciBzZXJ2ZXIgZG9tYWluKTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA8RtJCr+7ARJl24+0N3zepdeRI9/qVQ1rXvGEzZ85lDEavQV2a/DoiwL5AZfbkQTVMbpMVCQeUzatbzLprdYQL9bMI1ZpMI9gP+uC6IAUb7h5CbAeOIkVV5zQieONIb1JfzHBL+BB5Z1CeIpE47gOYwk7w3uZ1SF0c4NKe1d2v3MCAwEAATANBgkqhkiG9w0BAQUFAAOBgQCprm5a5bg1LqCDdtwDTnRDmVcca6HoUlvbjZLmWdLjltG1McNAATppTy/bF7vT3jXLobA1Vzs2g14POjYQhPnIbRPEnNzvAe+Se3y0YeFOwYarEyFBHKHODGIPaCnXGH8gB9fgcp2SYtLaPKvXdNL44VeYGbD4+fvUcu/zkXqTSg=="+#LF$+
          "-----END CERTIFICATE-----"

  UseNetworkTLS(PrivateKey$, Cert$)
  If CreateNetworkServer(0, 20252, #PB_Network_TCP | #PB_Network_IPv4 | #PB_Network_TLSv1, "127.0.0.1")
    Debug "TLS Server launched on 127.0.0.1:20252 - Waiting for connections..."
    
    Repeat
      Select NetworkServerEvent()
        Case #PB_NetworkEvent_Data
          
          Debug "Data recieved !"
          ClientID = EventClient()
          *Buffer = AllocateMemory(1000)
          If *Buffer
            Debug ReceiveNetworkData(ClientID, *Buffer, 1000)
          
            Debug "String: "+PeekS(*Buffer, -1, #PB_UTF8)
            SendNetworkString(ClientID, "Well received !!!")
            
            FreeMemory(*Buffer)
          EndIf
          
        Case #PB_NetworkEvent_None
          Delay(100) ; Don't steal the whole CPU time while waiting for connection
          Timeout - 100
      EndSelect
          
    Until Timeout <= 0
    
    Debug "Closing server after " + Str(Timeout/1000) + " secs timeout"
    
    CloseNetworkServer(0)
  Else
    Debug "Can't create the TLS server"
  EndIf

@EndCode

@Example TLS Client
@Code
  Timeout = 150000 ; 15 secs overall timeout

  UseNetworkTLS()

  Connection = OpenNetworkConnection("127.0.0.1", 20252, #PB_Network_TCP | #PB_Network_IPv4 | #PB_Network_TLSv1)
  If Connection
    
    ; Send some string to the server to test
    SendNetworkString(Connection, "GET / HTTP/1.1" + #CRLF$ + "Host: www.purebasic.fr" + #CRLF$ + #CRLF$)
    
    Repeat
      Select NetworkClientEvent(Connection)
        Case #PB_NetworkEvent_Data
          *Buffer = AllocateMemory($FFFF)
          If *Buffer
            Length = ReceiveNetworkData(Connection, *Buffer, MemorySize(*Buffer))
            Received$ + PeekS(*Buffer, Length, #PB_UTF8 | #PB_ByteLength)
            Debug "Recieved string: "+ Received$
            FreeMemory(*Buffer)
          EndIf
          
        Case #PB_NetworkEvent_Disconnect
          Debug "Disconnected"
          Break
          
        Case #PB_NetworkEvent_None
          Delay(100)
          Timeout - 100
          
      EndSelect
    Until Timeout <= 0
    
    CloseNetworkConnection(Connection)
  Else
    Debug "Can't open the connection on 127.0.0.1:20252"
  EndIf
@EndCode 

@SeeAlso
  @@CreateNetworkServer, @@OpenNetworkConnection

@SupportedOS

